#!/bin/sh

###SBATCH --cluster=ub-hpc
#SBATCH --cluster=faculty

###SBATCH --partition=general-compute --qos=general-compute
#SBATCH --partition=scavenger --qos=scavenger

#SBATCH --time=48:00:00
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=4

## Use snodes command to check their status first
###SBATCH --gres=gpu:tesla_v100-pcie-32gb:2
###SBATCH --gres=gpu:tesla_v100-pcie-16gb:2
###SBATCH --gres=gpu:a100-pcie-40gb:2
###SBATCH --gres=gpu:a100-pcie-80gb:2

### just give my job a single gpu
#SBATCH --gres=gpu:1
### give me a node which has the A100 gpus in it
#â€‹SBATCH --constraint=V100 

#SBATCH --mem=65536

#SBATCH --job-name="train_vo_pvgo"

###SBATCH --output= "result_$(date +"%Y_%m_%d_%k_%M_%S").out"

###SBATCH --mail-user=taimengf@buffalo.edu
###SBATCH --mail-type=ALL

###SBATCH --requeue

cat $0

source ~/.bashrc
# conda activate impe-learning
conda activate /projects/academic/cwx/shaoshus/packages/miniconda3/envs/shaoshu
nvidia-smi
# CUDA_VISIBLE_DEVICES=2

ds_name=FILENAME_NAME

# data_dir=/user/taimengf/projects/euroc/${ds_name}/mav0
data_dir=/user/shaoshus/projects/euroc/${ds_name}/mav0


loss_weight='(1,0.1,10,0.1)'
rot_w=1
trans_w=0.1
lr=3e-6
epoch=10
train_portion=1

use_scale=true

if [ "$use_scale" = true ]; then
    exp_type='mono'
else
    exp_type='stereo'
fi

project_name=euroc_${ds_name}_p${train_portion}
# project_name=test
# train_name=sr_imu0b
train_name=${rot_w}Ra_${trans_w}ta_delayOptm_lr=${lr}_${loss_weight}_${exp_type}
# train_name=debug


echo -e "\n=============================================="
echo "project name = ${project_name}"
echo "train name = ${train_name}"
echo -e  "==============================================\n"

rm -r train_results/${project_name}/${train_name}
mkdir -p train_results/${project_name}/${train_name}
rm -r train_results_models/${project_name}/${train_name}
mkdir -p train_results_models/${project_name}/${train_name}

which python

if [ "$use_scale" = true ]; then
    # mono
    python train.py \
        --result-dir train_results/${project_name}/${train_name} \
        --save-model-dir train_results_models/${project_name}/${train_name} \
        --project-name ${project_name} \
        --train-name ${train_name} \
        --vo-model-name ./models/stereo_cvt_tartanvo_1914.pkl \
        --batch-size 8 \
        --worker-num 2 \
        --data-root ${data_dir} \
        --start-frame 0 \
        --end-frame -1 \
        --train-epoch ${epoch} \
        --print-interval 1 \
        --snapshot-interval 1 \
        --lr ${lr} \
        --loss-weight ${loss_weight} \
        --mode train-all \
        --use-stereo 1 \
        --data-type euroc \
        --fix-model-parts 'flow' 'stereo' \
        --use-pvgo \
        --rot-w ${rot_w} \
        --trans-w ${trans_w} \
        --delay-optm \
        --train-portion ${train_portion} \
        --use-gt-scale
    # | tee train_results/${project_name}/${train_name}/log.txt
else
    # stereo not use scale
    python train.py \
    --result-dir train_results/${project_name}/${train_name} \
    --save-model-dir train_results_models/${project_name}/${train_name} \
    --project-name ${project_name} \
    --train-name ${train_name} \
    --vo-model-name ./models/stereo_cvt_tartanvo_1914.pkl \
    --batch-size 8 \
    --worker-num 2 \
    --data-root ${data_dir} \
    --start-frame 0 \
    --end-frame -1 \
    --train-epoch ${epoch} \
    --print-interval 1 \
    --snapshot-interval 1 \
    --lr ${lr} \
    --loss-weight ${loss_weight} \
    --mode train-all \
    --use-stereo 1 \
    --data-type euroc \
    --fix-model-parts 'flow' 'stereo' \
    --use-pvgo \
    --rot-w ${rot_w} \
    --trans-w ${trans_w} \
    --delay-optm \
    --train-portion ${train_portion} \
    # | tee train_results/${project_name}/${train_name}/log.txt
fi